#!/bin/bash

# Script to extract specific Pokémon data (name, height, weight, type)
# from the 'data.json' file (generated by the previous API retrieval script).
# It formats the output into a human-readable sentence.

# Define the input file generated by the previous script
DATA_FILE="data.json"

# Check if the data file exists
if [ ! -f "$DATA_FILE" ]; then
    echo "Error: $DATA_FILE not found."
    echo "Please ensure the API retrieval script (from Task 0) has been run successfully."
    exit 1
fi

echo "Extracting data from $DATA_FILE..."

# Use jq to extract the required fields and format them into the desired string.
# .name: Pokémon's name
# .types[0].type.name: The name of the first type
# (.weight / 10): Converts weight from hectograms to kilograms
# (.height / 10): Converts height from decimetres to meters
# The -r flag outputs raw strings, without JSON quoting.
jq -r '"\(.name | ascii_downcase | sub("\\b\\w"; "(\\U&)")) is of type \(.types[0].type.name | sub("\\b\\w"; "(\\U&)")), weighs \((.weight / 10))kg, and is \((.height / 10))m tall."' "$DATA_FILE"

# Explanation of jq filters:
# "\(...)" : String interpolation to build the final output string.
# .name: Accesses the 'name' field.
# .types[0].type.name: Accesses the name of the first type in the 'types' array.
# (.weight / 10): Divides the 'weight' value by 10 to convert from hectograms to kilograms.
# (.height / 10): Divides the 'height' value by 10 to convert from decimetres to meters.
# | ascii_downcase: Converts the name to lowercase.
# | sub("\\b\\w"; "(\\U&)") : Capitalizes the first letter of each word (e.g., 'electric' -> 'Electric', 'pikachu' -> 'Pikachu').
