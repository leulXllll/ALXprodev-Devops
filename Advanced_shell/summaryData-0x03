#!/bin/bash

# Script to generate a CSV report from multiple Pokémon JSON files.
# It extracts the name, height (in meters), and weight (in kilograms)
# of each Pokémon and then calculates the average height and weight.

# Define the directory where Pokémon JSON files are stored (from Task 2)
POKEMON_DATA_DIR="pokemon_data"

# Define the name for the output CSV report file
REPORT_FILE="pokemon_report.csv"

echo "Generating CSV Report at: $REPORT_FILE"

# --- 1. Generate CSV Header ---
# Overwrite the report file with the header
echo "Name,Height (m),Weight (kg)" > "$REPORT_FILE"

# --- 2. Extract Data and Populate CSV ---
# Check if the Pokémon data directory exists
if [ ! -d "$POKEMON_DATA_DIR" ]; then
    echo "Error: Directory '$POKEMON_DATA_DIR' not found."
    echo "Please ensure the 'fetch_multiple_pokemon.sh' script has been run successfully to create the data files."
    exit 1
fi

# Loop through each JSON file in the pokemon_data directory
# We sort the files by name to get a consistent output order as in the sample.
find "$POKEMON_DATA_DIR" -maxdepth 1 -type f -name "*.json" | sort | while read JSON_FILE; do
    # Extract name, height, and weight using jq.
    # .name: Pokémon's name
    # (.height / 10): Converts height from decimetres to meters
    # (.weight / 10): Converts weight from hectograms to kilograms
    # The -r flag outputs raw strings.
    # The @csv format outputs values as a CSV line, handling commas/quotes properly.
    # We then use sed to capitalize the first letter of the Pokémon name.
    DATA_LINE=$(jq -r '[.name, (.height / 10), (.weight / 10)] | @csv' "$JSON_FILE" | \
                sed -E 's/^"(\w)/\U\1/; s/",/"/' ) # Capitalize first letter and fix CSV quoting

    echo "$DATA_LINE" >> "$REPORT_FILE"
done

echo "" # Add a newline for better formatting after the CSV output

# --- 3. Calculate Average Height and Weight using awk ---
# Read the CSV file, skipping the header line (NR > 1)
# $2: Height column, $3: Weight column
# sum_height: Accumulates total height
# sum_weight: Accumulates total weight
# count: Counts the number of Pokémon (rows)
# END block: Executes after processing all lines, calculates and prints averages
awk -F',' '
    NR > 1 {
        sum_height += $2;
        sum_weight += $3;
        count++;
    }
    END {
        if (count > 0) {
            printf "Average Height: %.2f m\n", sum_height / count;
            printf "Average Weight: %.2f kg\n", sum_weight / count;
        } else {
            print "No Pokémon data found to calculate averages.";
        }
    }
' "$REPORT_FILE"

echo "" # Add a newline for final output
echo "Report generation completed."
