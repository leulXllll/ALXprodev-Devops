#!/bin/bash

# Script to retrieve Pokémon data from PokeAPI for a list of Pokémon.
# Each Pokémon's data is saved to a separate JSON file in a dedicated directory.
# Includes robust error handling with retry logic for API requests.

# Define the list of Pokémon names to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Define the base API URL
BASE_API_URL="https://pokeapi.co/api/v2/pokemon/"

# Define the directory to save the Pokémon data
OUTPUT_DIR="pokemon_data"

# Define the delay between successful requests in seconds to prevent rate-limiting issues
REQUEST_DELAY=1

# Define retry parameters
MAX_RETRIES=3       # Maximum number of times to retry a failed request
RETRY_DELAY=2       # Delay in seconds between retries

echo "Starting data retrieval for multiple Pokémon..."

# Create the output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Loop through each Pokémon in the list
for POKEMON_NAME in "${POKEMON_LIST[@]}"; do
    API_URL="${BASE_API_URL}${POKEMON_NAME}/"
    DATA_FILE="${OUTPUT_DIR}/${POKEMON_NAME}.json"
    ERROR_FILE="${OUTPUT_DIR}/errors.log" # Log errors specific to this script run

    echo "Fetching data for $POKEMON_NAME..."

    ATTEMPT=0
    SUCCESS=false

    # Retry loop for API requests
    while [ "$ATTEMPT" -lt "$MAX_RETRIES" ]; do
        ATTEMPT=$((ATTEMPT + 1))
        
        # Make the API request using curl and save the output.
        # -s: Silent mode (don't show progress meter or error messages)
        # -o: Write output to a file instead of stdout
        # -w "%{http_code}": Output the HTTP status code after the transfer
        # --fail: Fail silently (no output at all) on server errors (HTTP status >= 400)
        HTTP_STATUS=$(curl -s -o "$DATA_FILE" -w "%{http_code}" "$API_URL")

        # Check the HTTP status code
        if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "Saved data to $DATA_FILE ✅ (Attempt $ATTEMPT)"
            SUCCESS=true
            break # Exit retry loop on success
        else
            TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
            ERROR_MESSAGE="[$TIMESTAMP] Attempt $ATTEMPT/$MAX_RETRIES: Failed to retrieve data for $POKEMON_NAME. HTTP Status: $HTTP_STATUS"
            
            # If curl outputted an empty file or error, log that too
            if [ ! -s "$DATA_FILE" ]; then
                ERROR_MESSAGE+=". No data written to $DATA_FILE (file empty or not created)."
            fi
            
            echo "$ERROR_MESSAGE" | tee -a "$ERROR_FILE" >&2
            echo "Retrying $POKEMON_NAME in $RETRY_DELAY seconds..."
            # Clean up potentially incomplete or error-filled data file before retrying
            rm -f "$DATA_FILE"
            sleep "$RETRY_DELAY"
        fi
    done

    # If all retries failed for the current Pokémon
    if [ "$SUCCESS" = false ]; then
        echo "Failed to fetch data for $POKEMON_NAME after $MAX_RETRIES attempts. Skipping. ❌"
    fi

    # Add a delay between requests (after successful fetch or final failure)
    sleep "$REQUEST_DELAY"
done

echo "Data retrieval process completed."
